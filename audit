#!/usr/bin/env php
<?php

/**
 * @file
 * Script to fetch the Archive-It CDX/C for a given URL, then fetch the content
 * associated with the URL, then validate its SHA-1 checksum.
 *
 * Input is a file of URLs preserved in Archive-It, one URL per line.
 *
 * This script is distributed under the Unlicense. For more information, see the
 * LICENSE file or visit http://unlicense.org.
 */

require_once 'vendor/autoload.php';

use Base32\Base32;
use Monolog\Logger;
use GuzzleHttp\Psr7;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\ClientException;
use GuzzleHttp\Exception\ServerException;

define('CDXENDPOINT', 'http://wayback.archive-it.org/all/timemap/cdx?url=');
define('WAYBACKENDPOINT', 'http://wayback.archive-it.org/');

$options = getopt('c:u:l:');
$collection_id = $options['c'];
$path_to_url_list = $options['u'];
$path_to_log = isset($options['l']) ? $options['l']: 'archiveit_audit.log';
$urls = file($path_to_url_list);

// Filename assigned to the retrieved file. File is saved in the current
// working directory and deleted after the checksum verification.
$temp_filename = uniqid();

$log = new Monolog\Logger('Archive-It Auditor Log');
$log_stream_handler= new Monolog\Handler\StreamHandler($path_to_log, Logger::INFO);
$log->pushHandler($log_stream_handler);

$url_num = 0;
foreach ($urls as $url) {
    $url_num++;
    if (!$cdx_record = get_cdx_record($url, $log)) {
        continue;
    }

    $wayback_url = WAYBACKENDPOINT . $collection_id . '/' . $cdx_record[1] . 'id_/' . $cdx_record[2];
    if (!$content = get_content($wayback_url, $log)) {
        continue;
    }

    file_put_contents($temp_filename, $content);
    compare_digests($temp_filename, $cdx_record, $log);
    unlink($temp_filename);
}

print "Audit of $url_num ULRs complete. Results are in $path_to_log.\n";

/**
 * Gets the CDX/C "record" (row) that we use to validate the URL.
 *
 * @param string $url
 *   The URL to validate.
 * @param object $log
 *   The Monolog log object.
 *
 * @return array
 *   An array version of the CDX/C record. This entry will have a '200'
 *   HTTP response code, and the most recent timestamp value of all the
 *   rows with an HTTP 200 in the CDX/C record.
 */
function get_cdx_record($url, $log) {
    try {
        $client = new GuzzleHttp\Client();
        $cdx_request = CDXENDPOINT . trim($url);
        $res = $client->request('GET', $cdx_request);
        $cdxc = $res->getBody();
    } catch (Exception $e) {
        if ($e instanceof RequestException or $e instanceof ConnectException or $e instanceof ClientException or $e instanceof ServerException ) {
            $log->addError(Psr7\str($e->getRequest()));
            if ($e->hasResponse()) {
                $log->addError(Psr7\str($e->getResponse()));
                print Psr7\str($e->getResponse()) . "\n";
            }
            return false;
        }
    }

    // Split the CDX/C record string into rows.
    $cdx_rows = preg_split("/\\r\\n|\\r|\\n/", $cdxc);
    $cdx_entries = array();
    foreach ($cdx_rows as $key => $entry) {
        if (strlen($entry)) {
            // Then convert each row into an array.
            $entry_record = explode(' ', $entry);
            // We only want entries resulting from an HTTP 200 response.
            if ($entry_record[4] == '200') {
                $cdx_entries[] = $entry_record;
            }
        }
    }

    // Pick out the CDX/C record array that hast the most recent timestamp.
    // We see the comparison with the first CDX/C record.
    $latest_cdx_record = $cdx_entries[0];
    foreach ($cdx_entries as $cdx_entry) {
        if (strtotime($cdx_entry[1]) > strtotime($latest_cdx_record[1])) {
            $latest_cdx_record = $cdx_entry;
        }
    }

    return $latest_cdx_record;
}

/**
 * Gets the content at the URL.
 *
 * @param string $wayback_url
 *   The URL of the Arcive-It API to fetch the file content.
 * @param object $log
 *   The Monolog log object.
 *
 * @return string
 *   The file's contents.
 */
function get_content($wayback_url, $log) {
    try {
        $client = new GuzzleHttp\Client();
        $res = $client->request('GET', $wayback_url);
        return $res->getBody();
    } catch (Exception $e) {
        if ($e instanceof RequestException or $e instanceof ConnectException or $e instanceof ClientException or $e instanceof ServerException ) {
            $log->addError(Psr7\str($e->getRequest()));
            if ($e->hasResponse()) {
                $log->addError(Psr7\str($e->getResponse()));
                print Psr7\str($e->getResponse()) . "\n";
            }
            return false;
        }
    }
}

/**
 * Compares the sha1 checksum of the retrieved file with the sha1 in the CDX/C record.
 *
 * @param string $temp_filename
 *   The name of the retrived file.
 * @param array $cdx_record
 *   The CDX/C record array.
 * @param object $log
 *   The Monolog log object.
 *
 * @return string
 *   The file's contents.
 */
function compare_digests($temp_filename, $cdx_record, $log) {
    // Get the raw binary digest of the retrieved file.
    $sha1 = sha1_file($temp_filename, TRUE);
    // Archive-It stores its sha1 digests in Base32, so we need to
    // convert the binary digest to Base32 for comparison.
    $base32_encoded = Base32::encode($sha1);

    // Perform the comparison and log the result.
    if ($base32_encoded == $cdx_record[5]) {
        $log->addInfo("CDX/C checksum for {$cdx_record[2]} validated.");
    }
    else {
        $log->addWarning("CDX/C checksum for {$cdx_record[2]} invalid.");
    }
}
